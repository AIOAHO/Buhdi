{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Image } from 'expo-image';\nimport { TextInput, Button, Text, Headline, HelperText } from 'react-native-paper';\nimport * as AuthSession from 'expo-auth-session';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { login } from \"../../utils/auth\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport api from \"../../utils/api\";\nimport googleLogo from \"../../../assets/googleLogo.png\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var discovery = AuthSession.useAutoDiscovery('https://accounts.google.com');\n  var clientId = '435975996885-evg7n8veuqdqbqbc2bkq1bfo290k7h07.apps.googleusercontent.com';\n  var _useAuthRequest = useAuthRequest({\n      clientId: clientId,\n      redirectUri: makeRedirectUri(),\n      useProxy: true,\n      scopes: ['https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email'],\n      responseType: 'token',\n      usePKCE: false\n    }, discovery),\n    _useAuthRequest2 = _slicedToArray(_useAuthRequest, 3),\n    request = _useAuthRequest2[0],\n    response = _useAuthRequest2[1],\n    promptAsync = _useAuthRequest2[2];\n  console.log(`Redirect URI: ${request == null ? void 0 : request.redirectUri}`);\n  useEffect(function () {\n    if ((response == null ? void 0 : response.type) === 'success') {\n      var access_token = response.params.access_token;\n      handleLoginWithGoogleToken(access_token);\n    }\n  }, [response]);\n  var handleLoginWithGoogleToken = function () {\n    var _ref2 = _asyncToGenerator(function* (token) {\n      try {\n        var _response = yield api.post('/googlelogin', {\n          token: token\n        });\n        if (_response.status === 200 && _response.data.jwtToken) {\n          yield AsyncStorage.setItem('jwtToken', _response.data.jwtToken);\n          navigation.navigate('Home');\n        } else {\n          setError('Failed to log in with Google. Please try again.');\n        }\n      } catch (error) {\n        console.error('Google login error:', error);\n        setError('Failed to log in with Google. Please try again.');\n      }\n    });\n    return function handleLoginWithGoogleToken(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleLogin = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var success = yield login(email, password);\n        if (success) {\n          navigation.navigate('Home');\n        } else {\n          setError('Invalid email or password');\n        }\n      } catch (error) {\n        console.error('Login error:', error);\n        setError('Login failed. Please try again.');\n      }\n    });\n    return function handleLogin() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var GoogleSignInButton = function GoogleSignInButton(_ref4) {\n    var onPress = _ref4.onPress,\n      disabled = _ref4.disabled;\n    return _jsx(Button, {\n      icon: function icon() {\n        return _jsx(Image, {\n          source: googleLogo,\n          style: styles.logo\n        });\n      },\n      mode: \"outlined\",\n      onPress: onPress,\n      disabled: disabled,\n      style: styles.googleButton,\n      labelStyle: styles.googleText,\n      children: \"Continue With Google\"\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.linearTop\n    }), _jsxs(View, {\n      style: styles.formContainer,\n      children: [_jsx(Headline, {\n        style: styles.headline,\n        children: \"Login\"\n      }), _jsx(TextInput, {\n        label: \"Email\",\n        value: email,\n        onChangeText: setEmail,\n        autoCapitalize: \"none\",\n        keyboardType: \"email-address\",\n        style: styles.input\n      }), _jsx(TextInput, {\n        label: \"Password\",\n        secureTextEntry: true,\n        value: password,\n        onChangeText: setPassword,\n        mode: \"outlined\",\n        style: styles.input\n      }), error ? _jsx(HelperText, {\n        type: \"error\",\n        children: error\n      }) : null, _jsx(Button, {\n        mode: \"contained\",\n        onPress: handleLogin,\n        style: styles.button,\n        children: \"Login\"\n      }), _jsx(GoogleSignInButton, {\n        onPress: function onPress() {\n          return promptAsync();\n        },\n        disabled: !request\n      }), _jsxs(Text, {\n        style: styles.registerText,\n        children: [\"Don't have an account?\", ' ', _jsx(Text, {\n          style: styles.registerLink,\n          onPress: function onPress() {\n            return navigation.navigate('Registration');\n          },\n          children: \"Register here\"\n        })]\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%'\n  },\n  linearTop: {\n    width: '120%',\n    borderTopWidth: 7,\n    borderRadius: 50,\n    borderColor: '#DBCBD8',\n    position: 'absolute',\n    top: 0\n  },\n  formContainer: {\n    width: '100%',\n    maxWidth: 400\n  },\n  headline: {\n    textAlign: 'center',\n    marginBottom: 20,\n    color: '#E4FDE1'\n  },\n  input: {\n    color: '#E4FDE1',\n    backgroundColor: 'rgba(191, 191, 191, 0.25)',\n    marginBottom: 10,\n    width: '100%'\n  },\n  button: {\n    marginTop: 10,\n    width: '100%',\n    maxWidth: 400,\n    backgroundColor: '#E4FDE1',\n    color: '#59656F'\n  },\n  googleButton: {\n    width: '100%',\n    maxWidth: 400,\n    marginTop: 10\n  },\n  googleButtonContent: {},\n  logo: {\n    width: 24,\n    height: 24\n  },\n  googleText: {\n    color: '#E4FDE1'\n  },\n  registerText: {\n    marginTop: 10,\n    textAlign: 'center'\n  },\n  registerLink: {\n    marginTop: 10,\n    textAlign: 'center',\n    color: '#E4FDE1',\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","StyleSheet","Image","TextInput","Button","Text","Headline","HelperText","AuthSession","makeRedirectUri","useAuthRequest","login","AsyncStorage","api","googleLogo","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","navigation","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","error","setError","discovery","useAutoDiscovery","clientId","_useAuthRequest","redirectUri","useProxy","scopes","responseType","usePKCE","_useAuthRequest2","request","response","promptAsync","console","log","type","access_token","params","handleLoginWithGoogleToken","_ref2","_asyncToGenerator","token","post","status","data","jwtToken","setItem","navigate","_x","apply","arguments","handleLogin","_ref3","success","GoogleSignInButton","_ref4","onPress","disabled","icon","source","style","styles","logo","mode","googleButton","labelStyle","googleText","children","container","linearTop","formContainer","headline","label","value","onChangeText","autoCapitalize","keyboardType","input","secureTextEntry","button","registerText","registerLink","create","flex","justifyContent","alignItems","width","borderTopWidth","borderRadius","borderColor","position","top","maxWidth","textAlign","marginBottom","color","backgroundColor","marginTop","googleButtonContent","height","fontWeight"],"sources":["/Users/kimlyonshernandez/CODE/budhi/Buhdi/Client/src/components/Screens/LoginScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, Platform } from 'react-native';\nimport { Image } from 'expo-image';\nimport { TextInput, Button, Text, Headline, HelperText } from 'react-native-paper';\nimport * as AuthSession from 'expo-auth-session';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { login } from '../../utils/auth'; \nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport api from '../../utils/api';\nimport googleLogo from '../../../assets/googleLogo.png'; // Adjust the path as needed\n\n\n\n\nexport default function LoginScreen({ navigation }) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n    // Configuration for Google sign-in through Expo AuthSession\n  const discovery = AuthSession.useAutoDiscovery('https://accounts.google.com');\n  // Your Google Client ID from Google Developer Console\n  const clientId = '435975996885-evg7n8veuqdqbqbc2bkq1bfo290k7h07.apps.googleusercontent.com';\n\n\n  // Configuration for Expo AuthSession request\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId,\n      redirectUri: makeRedirectUri(),\n      useProxy: true,\n      scopes: ['https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email'],\n      responseType: 'token',\n      usePKCE: false,\n    },\n    discovery\n  );\n\n  console.log(`Redirect URI: ${request?.redirectUri}`);\n\n\n\n\n  useEffect(() => {\n    if (response?.type === 'success') {\n      const { access_token } = response.params;\n      // call your backend to verify the token and log the user in\n      handleLoginWithGoogleToken(access_token);\n    }\n  }, [response]);\n\n  const handleLoginWithGoogleToken = async (token) => {\n    try {\n      // Send the token to your backend for verification\n      const response = await api.post('/googlelogin', { token });\n  \n      if (response.status ===  200 && response.data.jwtToken) {\n        // Store the JWT token received from the backend\n        await AsyncStorage.setItem('jwtToken', response.data.jwtToken);\n        // Navigate to the Homepage screen\n        navigation.navigate('Home');\n      } else {\n        // Handle unsuccessful login\n        setError('Failed to log in with Google. Please try again.');\n      }\n    } catch (error) {\n      console.error('Google login error:', error);\n      setError('Failed to log in with Google. Please try again.');\n    }\n  };\n\n  const handleLogin = async () => {\n    try {\n      const success = await login(email, password); // Assuming this function returns a boolean\n      if (success) {\n        navigation.navigate('Home');\n      } else {\n        setError('Invalid email or password');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      setError('Login failed. Please try again.');\n    }\n  };\n\n    // Google Sign In Button Component\n    const GoogleSignInButton = ({ onPress, disabled }) => {\n      return (\n        <Button\n          icon={() => <Image source={googleLogo} style={styles.logo} />}\n          mode=\"outlined\"\n          onPress={onPress}\n          disabled={disabled}\n          style={styles.googleButton}\n          labelStyle={styles.googleText}\n        >\n          Continue With Google\n        </Button>\n      );\n    };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.linearTop}/>\n      <View style={styles.formContainer}>\n        <Headline style={styles.headline}>Login</Headline>\n        <TextInput\n          label=\"Email\"\n          value={email}\n          onChangeText={setEmail}\n          // mode=\"outlined\"\n          autoCapitalize=\"none\"\n          keyboardType=\"email-address\"\n          style={styles.input}\n        />\n        <TextInput\n          label=\"Password\"\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n          mode=\"outlined\"\n          style={styles.input}\n        />\n        {error ? <HelperText type=\"error\">{error}</HelperText> : null}\n        \n        <Button mode=\"contained\" onPress={handleLogin} style={styles.button}>\n          Login\n        \n        </Button>\n\n        <GoogleSignInButton onPress={() => promptAsync()} disabled={!request} />\n\n\n        <Text style={styles.registerText}>\n          Don't have an account?{' '}\n          <Text style={styles.registerLink} onPress={() => navigation.navigate('Registration')}>\n            Register here\n          </Text>\n        </Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  },\n  linearTop: {\n    width: '120%',\n    borderTopWidth: 7,\n    borderRadius: 50,\n    borderColor: '#DBCBD8',\n    position: 'absolute',\n    top: 0,\n  },\n  formContainer: {\n    width: '100%',\n    maxWidth: 400, // Set a maximum width for the container\n  },\n  headline: {\n    textAlign: 'center',\n    marginBottom: 20,\n    color: '#E4FDE1',\n  },\n  input: {\n    color: '#E4FDE1',\n    backgroundColor: 'rgba(191, 191, 191, 0.25)',\n    marginBottom: 10,\n    width: '100%', // Ensure inputs take the full width of the container\n  },\n  button: {\n    marginTop: 10,\n    width: '100%', // Ensure buttons take the full width of the container\n    maxWidth: 400, // Limit the maximum width of buttons\n    backgroundColor: '#E4FDE1',\n    color: '#59656F',\n  },\n  googleButton: {\n    width: '100%', // Full width button\n    maxWidth: 400, // Match the width with other elements\n    marginTop: 10,\n  },\n  googleButtonContent: {\n    //placeholder\n  },\n  logo: {\n    width: 24,\n    height: 24,\n  },\n  googleText: {\n    color: '#E4FDE1',\n//placeholder\n  },\n  registerText: {\n    marginTop: 10,\n    textAlign: 'center',\n    },\n  registerLink: {\n    marginTop: 10,\n    textAlign: 'center',\n    color: '#E4FDE1',\n    fontWeight: 'bold',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}