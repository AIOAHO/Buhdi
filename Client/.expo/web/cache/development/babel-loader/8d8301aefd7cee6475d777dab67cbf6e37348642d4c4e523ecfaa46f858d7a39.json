{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, Text } from 'react-native-paper';\nimport Question from \"../Quiz/Question\";\nimport { quizQuestions, enneagramTypeMapping } from \"../Quiz/EnneagramQuestions\";\nimport { useNavigation } from '@react-navigation/native';\nimport styles from \"../Quiz/EnneagramQuizStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function EnneagramQuiz() {\n  var navigation = useNavigation();\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentQuestionIndex = _useState2[0],\n    setCurrentQuestionIndex = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    shuffledQuestions = _useState4[0],\n    setShuffledQuestions = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    answers = _useState6[0],\n    setAnswers = _useState6[1];\n  useEffect(function () {\n    var selectedQuestions = selectRandomQuestionsPerType(quizQuestions);\n    setShuffledQuestions(selectedQuestions);\n    setAnswers(Array(selectedQuestions.length).fill(0));\n  }, []);\n  var selectRandomQuestionsPerType = function selectRandomQuestionsPerType(questions) {\n    var selected = [];\n    Object.keys(enneagramTypeMapping).forEach(function (typeKey) {\n      var filteredQuestions = questions.filter(function (q) {\n        return q.type.toString() === typeKey;\n      });\n      var shuffledQuestions = shuffleArray(filteredQuestions);\n      selected.push.apply(selected, _toConsumableArray(shuffledQuestions.slice(0, 4)));\n    });\n    return shuffleArray(selected);\n  };\n  var shuffleArray = function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var _ref = [array[j], array[i]];\n      array[i] = _ref[0];\n      array[j] = _ref[1];\n    }\n    return array;\n  };\n  var handleAnswer = function handleAnswer(score) {\n    var newAnswers = _toConsumableArray(answers);\n    newAnswers[currentQuestionIndex] = score;\n    setAnswers(newAnswers);\n    if (currentQuestionIndex < shuffledQuestions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n  var goToNextQuestion = function goToNextQuestion() {\n    if (currentQuestionIndex < shuffledQuestions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n  var goToPreviousQuestion = function goToPreviousQuestion() {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  var handleSubmit = function handleSubmit() {\n    var typeScores = shuffledQuestions.reduce(function (acc, question, index) {\n      var typeKey = question.type.toString();\n      acc[typeKey] = (acc[typeKey] || 0) + answers[index];\n      return acc;\n    }, {});\n    for (var type in typeScores) {\n      typeScores[type] = Math.round(typeScores[type] / (4 * 5) * 100);\n    }\n    var highestScoreType = null;\n    var highestScore = 0;\n    for (var _type in typeScores) {\n      if (typeScores[_type] > highestScore) {\n        highestScore = typeScores[_type];\n        highestScoreType = _type;\n      }\n    }\n    var formattedTypeScores = Object.entries(typeScores).map(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        type = _ref3[0],\n        score = _ref3[1];\n      return {\n        type: type,\n        score: score\n      };\n    });\n    navigation.navigate('EnneagramResults', {\n      highestScoreType: highestScoreType,\n      typeScores: formattedTypeScores\n    });\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: shuffledQuestions.length > 0 && _jsxs(_Fragment, {\n      children: [_jsx(Question, {\n        question: shuffledQuestions[currentQuestionIndex],\n        onAnswer: handleAnswer,\n        selectedScore: answers[currentQuestionIndex],\n        style: styles.question\n      }), _jsxs(Text, {\n        style: styles.questionIndicator,\n        children: [currentQuestionIndex + 1, \"/\", shuffledQuestions.length]\n      }), _jsxs(View, {\n        style: styles.navigationContainer,\n        children: [_jsx(View, {\n          style: {\n            flex: 1,\n            alignItems: 'flex-start'\n          },\n          children: currentQuestionIndex > 0 && _jsx(Button, {\n            mode: \"contained\",\n            onPress: goToPreviousQuestion,\n            children: \"Previous\"\n          })\n        }), _jsxs(View, {\n          style: {\n            flex: 1,\n            alignItems: 'flex-end',\n            flexDirection: 'row',\n            justifyContent: 'flex-end'\n          },\n          children: [currentQuestionIndex < shuffledQuestions.length - 1 && _jsx(Button, {\n            mode: \"contained\",\n            onPress: goToNextQuestion,\n            children: \"Next\"\n          }), currentQuestionIndex === shuffledQuestions.length - 1 && _jsx(Button, {\n            mode: \"contained\",\n            onPress: handleSubmit,\n            children: \"Submit\"\n          })]\n        })]\n      })]\n    })\n  });\n}\n;","map":{"version":3,"names":["React","useEffect","useState","View","Button","Text","Question","quizQuestions","enneagramTypeMapping","useNavigation","styles","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","EnneagramQuiz","navigation","_useState","_useState2","_slicedToArray","currentQuestionIndex","setCurrentQuestionIndex","_useState3","_useState4","shuffledQuestions","setShuffledQuestions","_useState5","_useState6","answers","setAnswers","selectedQuestions","selectRandomQuestionsPerType","Array","length","fill","questions","selected","Object","keys","forEach","typeKey","filteredQuestions","filter","q","type","toString","shuffleArray","push","apply","_toConsumableArray","slice","array","i","j","Math","floor","random","_ref","handleAnswer","score","newAnswers","goToNextQuestion","goToPreviousQuestion","handleSubmit","typeScores","reduce","acc","question","index","round","highestScoreType","highestScore","formattedTypeScores","entries","map","_ref2","_ref3","navigate","style","container","children","onAnswer","selectedScore","questionIndicator","navigationContainer","flex","alignItems","mode","onPress","flexDirection","justifyContent"],"sources":["/Users/kimlyonshernandez/CODE/budhi/Buhdi/Client/src/components/Screens/EnneagramQuizScreen.tsx"],"sourcesContent":["// src/components/Quiz/EnneagramQuiz.tsx\nimport React, { useEffect, useState } from 'react';\nimport { View } from 'react-native';\nimport { Button, Text } from 'react-native-paper';\nimport Question from '../Quiz/Question';\nimport { quizQuestions, enneagramTypeMapping } from '../Quiz/EnneagramQuestions';\nimport { useNavigation } from '@react-navigation/native';\nimport styles from '../Quiz/EnneagramQuizStyle';\n\nexport default function EnneagramQuiz() {\n  const navigation = useNavigation();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [shuffledQuestions, setShuffledQuestions] = useState([]);\n  const [answers, setAnswers] = useState([]);\n\n  useEffect(() => {\n    // Updated: Selects 3 random questions for each Enneagram type\n    const selectedQuestions = selectRandomQuestionsPerType(quizQuestions);\n    setShuffledQuestions(selectedQuestions);\n    setAnswers(Array(selectedQuestions.length).fill(0));\n  }, []);\n\n  // New function: Selects 3 random questions per Enneagram type\n  const selectRandomQuestionsPerType = (questions) => {\n    let selected = [];\n    Object.keys(enneagramTypeMapping).forEach(typeKey => {\n      const filteredQuestions = questions.filter(q => q.type.toString() === typeKey);\n      const shuffledQuestions = shuffleArray(filteredQuestions);\n      selected.push(...shuffledQuestions.slice(0, 4));\n    });\n    return shuffleArray(selected); // Shuffle the selected questions again to mix the types\n  };\n\n  // Shuffle function\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  // Check against shuffledQuestions.length\n  const handleAnswer = (score) => {\n    const newAnswers = [...answers];\n    newAnswers[currentQuestionIndex] = score;\n    setAnswers(newAnswers);\n    if (currentQuestionIndex < shuffledQuestions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n\n  // Adjusted: To check against shuffledQuestions.length\n  const goToNextQuestion = () => {\n    if (currentQuestionIndex < shuffledQuestions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n\n  // Unchanged: Navigation to previous question\n  const goToPreviousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  // Adjusted: Calculation based on shuffledQuestions\n  const handleSubmit = () => {\n    const typeScores = shuffledQuestions.reduce((acc, question, index) => {\n      const typeKey = question.type.toString();\n      acc[typeKey] = (acc[typeKey] || 0) + answers[index];\n      return acc;\n    }, {});\n\n    // Adjusted: Scoring scale based on 3 questions per type, each possibly scoring up to 5 points\n    for (const type in typeScores) {\n      typeScores[type] = Math.round((typeScores[type] / (4 * 5)) * 100);\n    }\n\n    let highestScoreType = null;\n    let highestScore = 0;\n    for (const type in typeScores) {\n      if (typeScores[type] > highestScore) {\n        highestScore = typeScores[type];\n        highestScoreType = type;\n      }\n    }\n\n    //chaning types for mongo db (data is send to mongo in results)\n    const formattedTypeScores = Object.entries(typeScores).map(([type, score]) => ({\n      type,\n      score\n    }));\n  \n    navigation.navigate('EnneagramResults', { highestScoreType, typeScores: formattedTypeScores });\n  };\n\n  return (\n    <View style={styles.container}>\n      {shuffledQuestions.length > 0 && (\n        <>\n          <Question\n            question={shuffledQuestions[currentQuestionIndex]}\n            onAnswer={handleAnswer}\n            selectedScore={answers[currentQuestionIndex]}\n            style={styles.question}\n          />\n          <Text style={styles.questionIndicator}>\n            {currentQuestionIndex + 1}/{shuffledQuestions.length}\n          </Text>\n          <View style={styles.navigationContainer}>\n            {/* Wrap the Previous button in a View for left alignment */}\n            <View style={{ flex: 1, alignItems: 'flex-start' }}>\n              {currentQuestionIndex > 0 && (\n                <Button mode=\"contained\" onPress={goToPreviousQuestion}>Previous</Button>\n              )}\n            </View>\n            \n            {/* Wrap the Next and Submit buttons in a View for right alignment */}\n            <View style={{ flex: 1, alignItems: 'flex-end', flexDirection: 'row', justifyContent: 'flex-end' }}>\n              {currentQuestionIndex < shuffledQuestions.length - 1 && (\n                <Button mode=\"contained\" onPress={goToNextQuestion}>Next</Button>\n              )}\n              {currentQuestionIndex === shuffledQuestions.length - 1 && (\n                <Button mode=\"contained\" onPress={handleSubmit}>Submit</Button>\n              )}\n            </View>\n          </View>\n        </>\n      )}\n    </View>\n  );\n};\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}